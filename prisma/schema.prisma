generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  lastName          String
  email             String              @unique
  username          String              @unique
  password          String
  birthday          DateTime
  bio               String?
  avatar            String?
  communities       CommunityHasUsers[]
  messages          Message[]
  role              String              @default(dbgenerated("user"))
  resetPasswordCode ResetPasswordCode?
  refreshToken      UserTokens?
  isActive          Boolean             @default(true)
}

model ResetPasswordCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Message {
  id                 Int              @id @default(autoincrement())
  content            String
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  communityChannel   CommunityChannel @relation(fields: [communityChannelId], references: [id])
  communityChannelId Int
}

model ChannelType {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String
  communityChannel CommunityChannel[]
}

model CommunityChannel {
  id            Int         @id @default(autoincrement())
  community     Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId   Int
  channelType   ChannelType @relation(fields: [channelTypeId], references: [id])
  channelTypeId Int
  messages      Message[]
}

model Community {
  id                Int                 @id @default(autoincrement())
  name              String
  subject           String              @default("subject")
  users             CommunityHasUsers[]
  communityChannels CommunityChannel[]
  banner            String?
  isActive          Boolean             @default(false)
}

model CommunityHasUsers {
  id          Int       @id @default(autoincrement())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model UserTokens {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  expiresIn DateTime
}
