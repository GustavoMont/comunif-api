generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String
  lastName            String
  email               String                @unique
  username            String                @unique
  password            String
  birthday            DateTime
  bio                 String?
  avatar              String?
  communities         CommunityHasUsers[]
  messages            Message[]
  role                String                @default(dbgenerated("user"))
  resetPasswordCode   ResetPasswordCode?
  refreshToken        UserTokens?
  isActive            Boolean               @default(true)
  userStatistics      UserStatistics[]
  communityStatistics CommunityStatistics[]
  messageStatistics   MessageStatistics[]
  evasions            EvasionReport[]       @relation("evasions")
  removes             EvasionReport[]       @relation("removes")
  adminCommunities    Community[]
}

model ResetPasswordCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Message {
  id                 Int              @id @default(autoincrement())
  content            String
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  communityChannel   CommunityChannel @relation(fields: [communityChannelId], references: [id])
  communityChannelId Int
  createdAt          DateTime         @default(now())
}

model ChannelType {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String
  communityChannel CommunityChannel[]
}

model CommunityChannel {
  id            Int         @id @default(autoincrement())
  community     Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId   Int
  channelType   ChannelType @relation(fields: [channelTypeId], references: [id])
  channelTypeId Int
  messages      Message[]
}

model Community {
  id                Int                 @id @default(autoincrement())
  name              String
  subject           String              @default("subject")
  users             CommunityHasUsers[]
  communityChannels CommunityChannel[]
  banner            String?
  isActive          Boolean             @default(false)
  evasions          EvasionReport[]
  adminId           Int?
  admin             User?               @relation(fields: [adminId], references: [id])
}

model CommunityHasUsers {
  id          Int       @id @default(autoincrement())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model UserTokens {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  expiresIn DateTime
}

model UserStatistics {
  id        Int      @id @default(autoincrement())
  count     Int
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model CommunityStatistics {
  id        Int      @id @default(autoincrement())
  count     Int
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model MessageStatistics {
  id        Int      @id @default(autoincrement())
  count     Int
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model EvasionReport {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation("evasions", fields: [userId], references: [id])
  removerId   Int?
  remover     User?     @relation("removes", fields: [removerId], references: [id])
  removedAt   DateTime  @default(now())
  reason      String?
}
